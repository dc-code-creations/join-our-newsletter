/*  When to use rem, em, px, %, etc.
      - source: https://www.freecodecamp.org/news/css-units-when-to-use-each-one/#:~:text=For%20width%2C%20percentages%20are%20often,depending%20on%20your%20specific%20requirements

      - absolute vs relative units
      - most important and frequently used units: rem, em, vh, vw, %, px

      - rem: "root em"
          - 1 rem = font size of the ROOT element, which defaults to 16px in many browsers
          - allows you to easily scale font size of the body elements proportionally to 
            the HTML font size
              - designed to adapt to user's browser preferences
              - helps with accessibility
              - good for easier, more consistant scaling by allowing you to change it in 
                one place
          - advantages for padding and margins (in terms of scalable, maintainable design)
              - rem or em should be used depending on if you want the element to be relative 
                to the root element or the parent
      - em: a relative unit of measure
          - 1 em = font size of PARENT element or nearest parent element with a defined 
            font size
          - use if you need to scale the element to be consistent with the parent
          - typically used for setting margin and padding
          - also important in media queries to enhance responsiveness and adaptability
      - %: render an element relative to the size of the element's parent
          - a percentage of their containing block, always relative to the nearest parent
          - use when you want to take up a certain amount of the containing block
          - can also be used to position elements relative to their containing elements
              - example creating layouts where elements need to be positioned based on a 
                percentage of the parent
          - can also be used to set width or height of element to scale relative to 
            containing element
      - vh: visible height area of browser window
          - useful for when you want an element to take up a certain percentage of the
            screen's height
          - also useful for responsize typography or when you don't want an element to be
            relative to the parent
          - can be inconsistencies in the way devices interpret the vh between browsers, so 
            proceed with caution
      - vw: visible width of the browser window
          - useful for when you want an element to take up a certain percentage of the
            screen's width
          - also used for font sizes in media queries for responsive typography
      - ch: relative unit that scales based on width of characters
          - 1 ch = width of "0" character in the current font
          - useful for defining max character length on a single line
          - also allows you to set a max width for text containers based on the width of 
            characters
      - px: pixels
          - absolute unit used to specify length and sizes
          - should be used sparingly and with caution for responsive design
          - does not scale according to container size, viewport, etc.
          - useful when specifying a fixed size of an element, such as border size or image 
            size

      - suggestions:
          - font sizes: commonly use rem or ch
          - width: percentages are often recommended; can also use vw and ch
          - height: %, rem, or vh.
          - padding or margin: typically use rem or em depending on your specific requirements
*/

/* Fonts
      - trying fonts the dynamic way in the case that I'll have to use them that way; not sure 
        what the reasoning is for choosing to use them dynamically vs statically */

.poppins-heading {
  font-family: "Poppins", serif;
  font-weight: 600;
  font-size: 3rem;
  font-style: normal;
}

.poppins-subheading {
  font-family: "Poppins", serif;
  font-weight: 500;
  font-size: 1.25rem;
  font-style: normal;
}

/* looks like this changes the font for the placeholder text too if I add it as a class to the input */
.poppins-placeholder {
  font-family: "Poppins", serif;
  font-weight: 500;
  font-size: 1rem;
  font-style: normal;
}

.poppins-button-text {
  font-family: "Poppins", serif;
  font-weight: 600;
  font-size: 1rem;
  font-style: normal;
}

.poppins-helper-text {
  font-family: "Poppins", serif;
  font-weight: 400;
  font-size: 0.875rem;
  font-style: normal;
}


/* Styles */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  text-align: center;
}

body {
  height: 100vh;
  background-color: #F9FAFB;
}

.join-nl-page {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0 20%;
  margin: 5rem 0;
}

.logo {
  width: 50px;
  margin: 1rem;
}

.author-info {
  font-size: .8rem;
  text-align: center;
  margin-top: 1rem;
  color: rgb(55, 65, 81);
}

.author-info a {
  text-decoration: none;
}

/* Title and sub-text section */

.info-text {
  padding: 2rem 0 5rem;
  color: #6C727F;
}

/* Email card section */

.card {
  padding: 2rem;
  border: none;
  border-radius: 10px;
  background-color: #FFFFFF;
  color: #394150;

  /* card width */
  width: 100%;
  max-width: 80%;
  
  /* Box-shadow */
  box-shadow: 0px 20px 30px 0px rgba(0, 0, 0, 0.03), 0px 8px 12px 0px rgba(0, 0, 0, 0.08);
}

.email-form {
  display: flex;
  flex-direction: column;
}

.email-form input {
  margin-bottom: 1rem;
  width: 100%;
  text-align: center;
  padding: .5rem 1rem;
  border: 1px solid #E5E7EB;
  border-radius: 5px;
  background-color: #F9FAFB;
}

.email-form input::placeholder {
  color: #394150;
}

.email-form button {
  margin-bottom: 1rem;
  width: 100%;
  padding: .5rem 1rem;
  border: 1px solid grey;
  border-radius: 5px;
  color: white;
  background-color: #284BCE;
}

.helper-text {
  font-size: .8rem;
}

@media (max-width: 1024px) {
  
  .join-nl-page {
    padding: 0 10%;
  }
}

@media (max-width: 640px) {
  
  .join-nl-page {
    padding: 0 5%;
  }

  .card {
    width: 100%;
    max-width: 100%;
  }
}